window.COURSE_DATA = {"language":"en","lastDownload":"2019-10-06T19:18:13-05:00","title":"Development of Web-Based Solutions","modules":[{"id":350211,"name":"Course Information","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"gc66c7eded04b39bc1ad57d8a64e1de2e","items":[{"id":2512014,"title":"Course Outline 810 - Fall 2019-1.pdf","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Course Outline 810 - Fall 2019-1.pdf"},{"id":2514505,"title":"Course Introduction.mp4","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Course Introduction.mp4"},{"id":2511698,"title":"Node.js Tutorials","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://www.youtube.com/watch?v=uVwtVBpw7RQ\u0026list=PLTjRvDozrdlydy3uUBWZlLUTNpJSGGCEm"},{"id":2511844,"title":"Install Node.js","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://nodejs.org/en/"}]},{"id":350212,"name":"Web Development","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g37bbe4068dcf92e84ed6193bcacb021d","items":[{"id":2466563,"title":"Web Development.mpg","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Web Development.mpg"},{"id":2489187,"title":"Web Development.pptx","type":"Attachment","indent":0,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Web Development.pptx"}]},{"id":353773,"name":"JavaScript","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g1bda1b28cff8c4c031f323b740dbbfd6","items":[{"id":2490021,"title":"A (Very) Brief Introduction to JavaScript.mpg","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/A (Very) Brief Introduction to JavaScript.mpg"},{"id":2489138,"title":"JavaScript - Introduction.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/JavaScript - Introduction.pptx"},{"id":2489479,"title":"Thorough JavaScript Tutorial for Beginners","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://www.youtube.com/watch?v=PkZNo7MFNFg"},{"id":2489537,"title":"Another JavaScript Tutorial","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://www.youtube.com/watch?v=W6NZfCO5SIk"},{"id":3261671,"title":"Introduction to JavaScript.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Introduction to JavaScript.pptx"},{"id":3261993,"title":"JavaScript - Variables and Expressions-2.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/JavaScript - Variables and Expressions-2.pptx"},{"id":3261682,"title":"JavaScript - Functions, Methods and Objects.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/JavaScript - Functions, Methods and Objects.pptx"},{"id":3261686,"title":"JavaScript - Conditions and Loops.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/JavaScript - Conditions and Loops.pptx"},{"id":3261691,"title":"JavaScript Assignment One","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYou can write code in Node.js that allows the user to enter a value but it's a bit complex at this stage.  So for these exercises, instead of prompting the user for input, you can just declare variables at the top of the file.  For example, number 1 compares two numbers so you can declare then like this:\u003c/p\u003e\r\n\u003cp\u003elet temp = 35;\u003cbr\u003elet  scale = 'C';\u003c/p\u003e\r\n\u003cp\u003e1. Write a function that takes two arguments.  The first is a temperature and the second is toScale.  If the toScale argument is C, convert the temperature from Fahrenheit to Celsius.  If toScale is F, convert the temperature from Celsius to Fahrenheit.  \u003c/p\u003e\r\n\u003cp\u003e2. Write a function that has two arguments and returns the higher of the two.  The function should return 'Out of range' if the values are not in the range 40 - 60.  Your code should log the result to the console.\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003e3. Write a function that takes a string like this:\u003c/p\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003elet foo = \"5 + 4\";\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eThe values (5 and 4) can be any two numbers and the operator can be +, -,  / or *.   The expression should only have two values and one operator.  The function should divide this into parts using a statement like this:\u003c/div\u003e\r\n\u003cdiv\u003e\n\u003cbr\u003e\r\n\u003cdiv\u003elet parts = foo.split(\" \");\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eYou can log parts to see what this does. \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eThe function should then return the result of the operation.  \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e4. Write a JavaScript function that reverses a string. Research the join, reverse and split methods to do it.  Your program should log the original string and the reversed string to the console.\u003c/p\u003e\r\n\u003cp\u003eExample:\u003c/p\u003e\r\n\u003cp\u003ecat\u003cbr\u003etac\u003c/p\u003e\r\n\u003cp\u003e5. Write a JavaScript function that takes three numbers as arguments and logs them in ascending order.\u003cbr\u003e\u003cbr\u003eExample:\u003c/p\u003e\r\n\u003cp\u003emyFunction(4, 52, -1)\u003c/p\u003e\r\n\u003cp\u003e-1, 4, 52\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003e6. Write a JavaScript function that takes an array of objects that contain student names and grades and computes the average and logs them in ascending order.\u003c/p\u003e\r\n\u003cp\u003eExample:\u003c/p\u003e\r\n\u003cp\u003evar students = [['David', 80], ['Vinoth', 77], ['Divya', 88], ['Ishitha', 95], ['Thomas', 68]];\u003c/p\u003e\r\n\u003cp\u003eThe average is 81.6\u003c/p\u003e\r\n\u003cp\u003eThomas 68\u003cbr\u003eVinoth 77\u003cbr\u003eDavid 80\u003cbr\u003eDivya 88\u003cbr\u003eIshitha 95\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e7. Write an object constructor for a circle.  Include a property for the radius and two methods to calculate the area and circumference. \u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003e8. The first step in brewing beer is to soak malted grains in hot water to convert carbohydrates to sugars.  This process is called mashing and the resulting sugar water is called wort.  The amount of sugar that a type of grain can contribute is called the max ppg (points/pounds/gallon).  The amount of sugars in the wort is indicated by specific gravity and, assuming all the sugars are converted, the maximum gravity that a wort can have is called the expected original gravity (expected OG).  To calculate the expected OG, you multiple the quantity of grain (in pounds) times the max ppg, sum that over all grains and then divide by the amount of wort (in gallons).\u003cbr\u003e\u003cbr\u003eCreate a object constructor called Grain that has two properties (max ppg and quantity) and one method that returns the product of max ppg and quantity.\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eCreate a second object constructor called Mash that has a property called volume and a property that is a array of Grain objects.  The Mash object has two methods:  addGrain takes two arguments and creates a Grain object and adds it to the array and calcEOG calculates the expected OG.\u003c/p\u003e\r\n\u003cp\u003eExample:\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eGrain\u003c/td\u003e\r\n\u003ctd\u003eQuantity\u003c/td\u003e\r\n\u003ctd\u003eMax ppg\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ePale Malt (2 Row)\u003c/td\u003e\r\n\u003ctd\u003e9\u003c/td\u003e\r\n\u003ctd\u003e37\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eCaramel/Crystal Malt - 20L\u003c/td\u003e\r\n\u003ctd\u003e.75\u003c/td\u003e\r\n\u003ctd\u003e35\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eVolume: 7 gal\u003c/p\u003e\r\n\u003cp\u003eExpected OG: 51.32\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","exportId":"javascript-assignment-one"},{"id":3319046,"title":"AssignmentOne.js","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/AssignmentOne.js"},{"id":3314836,"title":"JavaScript - Prototypes.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/JavaScript - Prototypes.pptx"},{"id":3314851,"title":"JavaScript - Callbacks and Promises.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/JavaScript - Callbacks and Promises.pptx"},{"id":3314855,"title":"JavaScript - CommonJS Modules.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/JavaScript - CommonJS Modules.pptx"},{"id":3314869,"title":"JavaScript Assignment Two","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003ch3\u003ePart 1\u003c/h3\u003e\r\n\u003cp\u003eCreate a program that:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUses the constructor notation to define a Student object which includes.\r\n\u003col\u003e\r\n\u003cli\u003ename and grades properties (grades is an array)\u003c/li\u003e\r\n\u003cli\u003eaddGrade method that adds a grade to the grades array\u003c/li\u003e\r\n\u003cli\u003etotalGrades method that totals the grades in the grades array\u003c/li\u003e\r\n\u003cli\u003eaverageGrades method that returns the average of the grades or returns 0 if there are no grades\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCreates an instance of the Student object\u003c/li\u003e\r\n\u003cli\u003eWrites the student name to the console\u003c/li\u003e\r\n\u003cli\u003eAdds two grades to the student object\u003c/li\u003e\r\n\u003cli\u003eWrites the total of the grades to the console\u003c/li\u003e\r\n\u003cli\u003eWrites the average of the grades to the console\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003ePart 2\u003c/h3\u003e\r\n\u003cp\u003eConvert the student object you created in Part1 into a CommonJS module.  This will follow a similar format as the myModule constructor in the notes.  However, this module represents a single student so, instead of an array, the module should export an object.  It should have the same properties and methods as in Part 1.\u003c/p\u003e\r\n\u003cp\u003eCreate another module called roster.  This is an array of students objects.  It should have methods to add a student (addStudent) and to calculate the averages for all students in the roster (calcGrades) array (keep in mind that the student objects have a method to calculate their average grade).  The calcGrades method method should return an array of averages.\u003c/p\u003e\r\n\u003cp\u003eCreate a file called classRoom.js that imports the two modules and adds two students with their grades:\u003c/p\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003eroster.addStudent(new Student('Lutfus'))\u003c/div\u003e\r\n\u003cdiv\u003eroster[0].addGrade(75);\u003c/div\u003e\r\n\u003cdiv\u003eroster[0].addGrade(100);\u003c/div\u003e\r\n\u003cbr\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eroster.addStudent(new Student('Sally'))\u003c/div\u003e\r\n\u003cdiv\u003eroster[1].addGrade(95);\u003c/div\u003e\r\n\u003cdiv\u003eroster[1].addGrade(100);\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIt should then write the names of the students to the console and the array of average grades.\u003c/p\u003e","exportId":"javascript-assignment-two"},{"id":3319051,"title":"callModule.js","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/callModule.js"},{"id":3319054,"title":"modules.js","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/modules.js"},{"id":3319060,"title":"Ass2Part1.js","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/Ass2Part1.js"},{"id":3319062,"title":"studentModule.js","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/studentModule.js"},{"id":3319063,"title":"rosterModule.js","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/rosterModule.js"},{"id":3319064,"title":"requireModule.js","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/requireModule.js"},{"id":3329333,"title":"Additional JavaScript Exam Practice","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eConvert the objects in number 8 of the first JavaScript practice assignment and convert them to common.js modules.  \u003c/p\u003e","exportId":"additional-javascript-exam-practice"},{"id":3377709,"title":"Another Module Exercise","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eSolid objects are often modelled by engineers as a collection of small geometric solids (cones, spheres, etc.). \u003c/p\u003e\r\n\u003cp\u003eCreate two modules to model a sphere and a cone.  These should have properties required to compute their volumes and a function that computes their volume. \u003cspan id=\"selectionBoundary_1570045932637_6630864243410328\" class=\"rangySelectionBoundary\" style=\"line-height: 0; display: none;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eCreate a module to model a shape.  This should have an array that holds the various objects used to model it (sphere and cones).  It should have a function that computes the total volume which is the sum of the volumes of all the shapes in the array.\u003c/p\u003e\r\n\u003cp\u003eIf you have a cone with radius 5 and height 10 and a sphere with radius 8, the total volume is around 2248.\u003c/p\u003e\r\n\u003cp\u003eNote that you can get pi in JavaScript using Math.PI.\u003c/p\u003e","exportId":"another-module-exercise"}]},{"id":495048,"name":"GitHub","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"gbce5705188f7a3f6c9b860aaf03d18c2","items":[{"id":3355927,"title":"GitHub Desktop","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://desktop.github.com/"},{"id":3355947,"title":"Pro Git Book","type":"ExternalUrl","indent":1,"locked":false,"requirement":null,"completed":false,"content":"https://git-scm.com/book/en/v2"},{"id":3356121,"title":"GitHub with VS Code.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/GitHub with VS Code.pptx"},{"id":3362864,"title":"Git and Visual Studio Code","type":"WikiPage","indent":1,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn order for Visual Studio Code to recognize git, you \u003cspan style=\";\"\u003emust \u003c/span\u003einstall the version at \u003ca href=\"https://git-scm.com/\"\u003ehttps://git-scm.com/. \u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eIt will not recognize git if you just install GitHub Desktop.\u003c/p\u003e","exportId":"git-and-visual-studio-code"}]},{"id":495091,"name":"Server","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"gbce09d599f0d2215c39ce0122598534a","items":[{"id":3356300,"title":"First Steps with Node.pptx","type":"Attachment","indent":1,"locked":false,"requirement":null,"completed":false,"content":"viewer/files/First Steps with Node.pptx"}]},{"id":497023,"name":"Installation Hints","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"ga86c0a88174ff14829d932e8cd53017d","items":[{"id":3372603,"title":"Installing Node on a Mac - Web Educator","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"https://www.webucator.com/how-to/how-install-nodejs-on-mac.cfm"},{"id":3372604,"title":"Installing Node on a Mac - Treehouse","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"https://treehouse.github.io/installation-guides/mac/node-mac.html"},{"id":3372606,"title":"Installing Node on a Mac - YouTube (There are a lot of them like this)","type":"ExternalUrl","indent":0,"locked":false,"requirement":null,"completed":false,"content":"https://www.youtube.com/watch?v=s09RbeSWbmM"},{"id":3372607,"title":"Git and Visual Studio Code","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn order for Visual Studio Code to recognize git, you \u003cspan style=\";\"\u003emust \u003c/span\u003einstall the version at \u003ca href=\"https://git-scm.com/\"\u003ehttps://git-scm.com/. \u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eIt will not recognize git if you just install GitHub Desktop.\u003c/p\u003e","exportId":"git-and-visual-studio-code"}]}],"pages":[{"exportId":"javascript-assignment-one","title":"JavaScript Assignment One","type":"WikiPage","content":"\u003cp\u003eYou can write code in Node.js that allows the user to enter a value but it's a bit complex at this stage.  So for these exercises, instead of prompting the user for input, you can just declare variables at the top of the file.  For example, number 1 compares two numbers so you can declare then like this:\u003c/p\u003e\r\n\u003cp\u003elet temp = 35;\u003cbr\u003elet  scale = 'C';\u003c/p\u003e\r\n\u003cp\u003e1. Write a function that takes two arguments.  The first is a temperature and the second is toScale.  If the toScale argument is C, convert the temperature from Fahrenheit to Celsius.  If toScale is F, convert the temperature from Celsius to Fahrenheit.  \u003c/p\u003e\r\n\u003cp\u003e2. Write a function that has two arguments and returns the higher of the two.  The function should return 'Out of range' if the values are not in the range 40 - 60.  Your code should log the result to the console.\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003e3. Write a function that takes a string like this:\u003c/p\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003elet foo = \"5 + 4\";\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eThe values (5 and 4) can be any two numbers and the operator can be +, -,  / or *.   The expression should only have two values and one operator.  The function should divide this into parts using a statement like this:\u003c/div\u003e\r\n\u003cdiv\u003e\n\u003cbr\u003e\r\n\u003cdiv\u003elet parts = foo.split(\" \");\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eYou can log parts to see what this does. \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eThe function should then return the result of the operation.  \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e4. Write a JavaScript function that reverses a string. Research the join, reverse and split methods to do it.  Your program should log the original string and the reversed string to the console.\u003c/p\u003e\r\n\u003cp\u003eExample:\u003c/p\u003e\r\n\u003cp\u003ecat\u003cbr\u003etac\u003c/p\u003e\r\n\u003cp\u003e5. Write a JavaScript function that takes three numbers as arguments and logs them in ascending order.\u003cbr\u003e\u003cbr\u003eExample:\u003c/p\u003e\r\n\u003cp\u003emyFunction(4, 52, -1)\u003c/p\u003e\r\n\u003cp\u003e-1, 4, 52\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003e6. Write a JavaScript function that takes an array of objects that contain student names and grades and computes the average and logs them in ascending order.\u003c/p\u003e\r\n\u003cp\u003eExample:\u003c/p\u003e\r\n\u003cp\u003evar students = [['David', 80], ['Vinoth', 77], ['Divya', 88], ['Ishitha', 95], ['Thomas', 68]];\u003c/p\u003e\r\n\u003cp\u003eThe average is 81.6\u003c/p\u003e\r\n\u003cp\u003eThomas 68\u003cbr\u003eVinoth 77\u003cbr\u003eDavid 80\u003cbr\u003eDivya 88\u003cbr\u003eIshitha 95\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e7. Write an object constructor for a circle.  Include a property for the radius and two methods to calculate the area and circumference. \u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003e8. The first step in brewing beer is to soak malted grains in hot water to convert carbohydrates to sugars.  This process is called mashing and the resulting sugar water is called wort.  The amount of sugar that a type of grain can contribute is called the max ppg (points/pounds/gallon).  The amount of sugars in the wort is indicated by specific gravity and, assuming all the sugars are converted, the maximum gravity that a wort can have is called the expected original gravity (expected OG).  To calculate the expected OG, you multiple the quantity of grain (in pounds) times the max ppg, sum that over all grains and then divide by the amount of wort (in gallons).\u003cbr\u003e\u003cbr\u003eCreate a object constructor called Grain that has two properties (max ppg and quantity) and one method that returns the product of max ppg and quantity.\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eCreate a second object constructor called Mash that has a property called volume and a property that is a array of Grain objects.  The Mash object has two methods:  addGrain takes two arguments and creates a Grain object and adds it to the array and calcEOG calculates the expected OG.\u003c/p\u003e\r\n\u003cp\u003eExample:\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eGrain\u003c/td\u003e\r\n\u003ctd\u003eQuantity\u003c/td\u003e\r\n\u003ctd\u003eMax ppg\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003ePale Malt (2 Row)\u003c/td\u003e\r\n\u003ctd\u003e9\u003c/td\u003e\r\n\u003ctd\u003e37\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003eCaramel/Crystal Malt - 20L\u003c/td\u003e\r\n\u003ctd\u003e.75\u003c/td\u003e\r\n\u003ctd\u003e35\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eVolume: 7 gal\u003c/p\u003e\r\n\u003cp\u003eExpected OG: 51.32\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"another-module-exercise","title":"Another Module Exercise","type":"WikiPage","content":"\u003cp\u003eSolid objects are often modelled by engineers as a collection of small geometric solids (cones, spheres, etc.). \u003c/p\u003e\r\n\u003cp\u003eCreate two modules to model a sphere and a cone.  These should have properties required to compute their volumes and a function that computes their volume. \u003cspan id=\"selectionBoundary_1570045932637_6630864243410328\" class=\"rangySelectionBoundary\" style=\"line-height: 0; display: none;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eCreate a module to model a shape.  This should have an array that holds the various objects used to model it (sphere and cones).  It should have a function that computes the total volume which is the sum of the volumes of all the shapes in the array.\u003c/p\u003e\r\n\u003cp\u003eIf you have a cone with radius 5 and height 10 and a sphere with radius 8, the total volume is around 2248.\u003c/p\u003e\r\n\u003cp\u003eNote that you can get pi in JavaScript using Math.PI.\u003c/p\u003e","frontPage":false},{"exportId":"javascript-assignment-two","title":"JavaScript Assignment Two","type":"WikiPage","content":"\u003ch3\u003ePart 1\u003c/h3\u003e\r\n\u003cp\u003eCreate a program that:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUses the constructor notation to define a Student object which includes.\r\n\u003col\u003e\r\n\u003cli\u003ename and grades properties (grades is an array)\u003c/li\u003e\r\n\u003cli\u003eaddGrade method that adds a grade to the grades array\u003c/li\u003e\r\n\u003cli\u003etotalGrades method that totals the grades in the grades array\u003c/li\u003e\r\n\u003cli\u003eaverageGrades method that returns the average of the grades or returns 0 if there are no grades\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCreates an instance of the Student object\u003c/li\u003e\r\n\u003cli\u003eWrites the student name to the console\u003c/li\u003e\r\n\u003cli\u003eAdds two grades to the student object\u003c/li\u003e\r\n\u003cli\u003eWrites the total of the grades to the console\u003c/li\u003e\r\n\u003cli\u003eWrites the average of the grades to the console\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003ePart 2\u003c/h3\u003e\r\n\u003cp\u003eConvert the student object you created in Part1 into a CommonJS module.  This will follow a similar format as the myModule constructor in the notes.  However, this module represents a single student so, instead of an array, the module should export an object.  It should have the same properties and methods as in Part 1.\u003c/p\u003e\r\n\u003cp\u003eCreate another module called roster.  This is an array of students objects.  It should have methods to add a student (addStudent) and to calculate the averages for all students in the roster (calcGrades) array (keep in mind that the student objects have a method to calculate their average grade).  The calcGrades method method should return an array of averages.\u003c/p\u003e\r\n\u003cp\u003eCreate a file called classRoom.js that imports the two modules and adds two students with their grades:\u003c/p\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003eroster.addStudent(new Student('Lutfus'))\u003c/div\u003e\r\n\u003cdiv\u003eroster[0].addGrade(75);\u003c/div\u003e\r\n\u003cdiv\u003eroster[0].addGrade(100);\u003c/div\u003e\r\n\u003cbr\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eroster.addStudent(new Student('Sally'))\u003c/div\u003e\r\n\u003cdiv\u003eroster[1].addGrade(95);\u003c/div\u003e\r\n\u003cdiv\u003eroster[1].addGrade(100);\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIt should then write the names of the students to the console and the array of average grades.\u003c/p\u003e","frontPage":false},{"exportId":"git-and-visual-studio-code","title":"Git and Visual Studio Code","type":"WikiPage","content":"\u003cp\u003eIn order for Visual Studio Code to recognize git, you \u003cspan style=\";\"\u003emust \u003c/span\u003einstall the version at \u003ca href=\"https://git-scm.com/\"\u003ehttps://git-scm.com/. \u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eIt will not recognize git if you just install GitHub Desktop.\u003c/p\u003e","frontPage":false},{"exportId":"additional-javascript-exam-practice","title":"Additional JavaScript Exam Practice","type":"WikiPage","content":"\u003cp\u003eConvert the objects in number 8 of the first JavaScript practice assignment and convert them to common.js modules.  \u003c/p\u003e","frontPage":false}],"assignments":[],"discussion_topics":[],"quizzes":[],"files":[{"type":"file","name":"Web Development.mpg","size":282007552,"files":null},{"type":"file","name":"rosterModule.js","size":394,"files":null},{"type":"file","name":"JavaScript - CommonJS Modules.pptx","size":462296,"files":null},{"type":"file","name":"Course Outline 810 - Fall 2019-1.pdf","size":218982,"files":null},{"type":"file","name":"JavaScript - Variables and Expressions-2.pptx","size":669549,"files":null},{"type":"file","name":"Introduction to JavaScript.pptx","size":918238,"files":null},{"type":"file","name":"studentModule.js","size":564,"files":null},{"type":"file","name":"A (Very) Brief Introduction to JavaScript.mpg","size":248119296,"files":null},{"type":"file","name":"JavaScript - Callbacks and Promises.pptx","size":1096335,"files":null},{"type":"file","name":"Course Introduction.mp4","size":35395940,"files":null},{"type":"file","name":"GitHub with VS Code.pptx","size":1124489,"files":null},{"type":"file","name":"requireModule.js","size":522,"files":null},{"type":"file","name":"First Steps with Node.pptx","size":337952,"files":null},{"type":"file","name":"modules.js","size":287,"files":null},{"type":"file","name":"JavaScript - Introduction.pptx","size":56797,"files":null},{"type":"file","name":"JavaScript - Functions, Methods and Objects.pptx","size":496846,"files":null},{"type":"file","name":"JavaScript - Prototypes.pptx","size":466066,"files":null},{"type":"file","name":"JavaScript - Conditions and Loops.pptx","size":354223,"files":null},{"type":"file","name":"AssignmentOne.js","size":2866,"files":null},{"type":"file","name":"Ass2Part1.js","size":462,"files":null},{"type":"file","name":"callModule.js","size":189,"files":null},{"type":"file","name":"Web Development.pptx","size":194347,"files":null}]}